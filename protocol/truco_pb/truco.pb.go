// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: truco.proto

package pbtruco

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Statue int32

const (
	Statue_OUT_CARD Statue = 0
	Statue_OP       Statue = 1
	Statue_WAIT     Statue = 2
)

var Statue_name = map[int32]string{
	0: "OUT_CARD",
	1: "OP",
	2: "WAIT",
}

var Statue_value = map[string]int32{
	"OUT_CARD": 0,
	"OP":       1,
	"WAIT":     2,
}

func (x Statue) String() string {
	return proto.EnumName(Statue_name, int32(x))
}

func (Statue) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e54be1aa9105a3e, []int{0}
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e54be1aa9105a3e, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type RoundEnvidoPoints struct {
	Score                int32    `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
	EnvidoPoint          int32    `protobuf:"varint,2,opt,name=envidoPoint,proto3" json:"envidoPoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoundEnvidoPoints) Reset()         { *m = RoundEnvidoPoints{} }
func (m *RoundEnvidoPoints) String() string { return proto.CompactTextString(m) }
func (*RoundEnvidoPoints) ProtoMessage()    {}
func (*RoundEnvidoPoints) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e54be1aa9105a3e, []int{1}
}
func (m *RoundEnvidoPoints) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoundEnvidoPoints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoundEnvidoPoints.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoundEnvidoPoints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundEnvidoPoints.Merge(m, src)
}
func (m *RoundEnvidoPoints) XXX_Size() int {
	return m.Size()
}
func (m *RoundEnvidoPoints) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundEnvidoPoints.DiscardUnknown(m)
}

var xxx_messageInfo_RoundEnvidoPoints proto.InternalMessageInfo

func (m *RoundEnvidoPoints) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *RoundEnvidoPoints) GetEnvidoPoint() int32 {
	if m != nil {
		return m.EnvidoPoint
	}
	return 0
}

type GameOverInfo struct {
	PlayerId             int64    `protobuf:"varint,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	Score                int32    `protobuf:"varint,2,opt,name=Score,proto3" json:"Score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameOverInfo) Reset()         { *m = GameOverInfo{} }
func (m *GameOverInfo) String() string { return proto.CompactTextString(m) }
func (*GameOverInfo) ProtoMessage()    {}
func (*GameOverInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e54be1aa9105a3e, []int{2}
}
func (m *GameOverInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameOverInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameOverInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameOverInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameOverInfo.Merge(m, src)
}
func (m *GameOverInfo) XXX_Size() int {
	return m.Size()
}
func (m *GameOverInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GameOverInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GameOverInfo proto.InternalMessageInfo

func (m *GameOverInfo) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *GameOverInfo) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

type GameWinInfo struct {
	Game                 []*GameInfo `protobuf:"bytes,1,rep,name=Game,proto3" json:"Game,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GameWinInfo) Reset()         { *m = GameWinInfo{} }
func (m *GameWinInfo) String() string { return proto.CompactTextString(m) }
func (*GameWinInfo) ProtoMessage()    {}
func (*GameWinInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e54be1aa9105a3e, []int{3}
}
func (m *GameWinInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameWinInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameWinInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameWinInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameWinInfo.Merge(m, src)
}
func (m *GameWinInfo) XXX_Size() int {
	return m.Size()
}
func (m *GameWinInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GameWinInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GameWinInfo proto.InternalMessageInfo

func (m *GameWinInfo) GetGame() []*GameInfo {
	if m != nil {
		return m.Game
	}
	return nil
}

type GameInfo struct {
	PlayerId             int64    `protobuf:"varint,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	Score                int32    `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	WinPlayerId          int64    `protobuf:"varint,3,opt,name=WinPlayerId,proto3" json:"WinPlayerId,omitempty"`
	State                WinState `protobuf:"varint,4,opt,name=State,proto3,enum=pbtruco.WinState" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameInfo) Reset()         { *m = GameInfo{} }
func (m *GameInfo) String() string { return proto.CompactTextString(m) }
func (*GameInfo) ProtoMessage()    {}
func (*GameInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e54be1aa9105a3e, []int{4}
}
func (m *GameInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameInfo.Merge(m, src)
}
func (m *GameInfo) XXX_Size() int {
	return m.Size()
}
func (m *GameInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GameInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GameInfo proto.InternalMessageInfo

func (m *GameInfo) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *GameInfo) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *GameInfo) GetWinPlayerId() int64 {
	if m != nil {
		return m.WinPlayerId
	}
	return 0
}

func (m *GameInfo) GetState() WinState {
	if m != nil {
		return m.State
	}
	return WinState_NormalFinish
}

type PokerMsg struct {
	PokerList            []string `protobuf:"bytes,1,rep,name=PokerList,proto3" json:"PokerList,omitempty"`
	TablePokerList       []string `protobuf:"bytes,2,rep,name=TablePokerList,proto3" json:"TablePokerList,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PokerMsg) Reset()         { *m = PokerMsg{} }
func (m *PokerMsg) String() string { return proto.CompactTextString(m) }
func (*PokerMsg) ProtoMessage()    {}
func (*PokerMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e54be1aa9105a3e, []int{5}
}
func (m *PokerMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PokerMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PokerMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PokerMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PokerMsg.Merge(m, src)
}
func (m *PokerMsg) XXX_Size() int {
	return m.Size()
}
func (m *PokerMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_PokerMsg.DiscardUnknown(m)
}

var xxx_messageInfo_PokerMsg proto.InternalMessageInfo

func (m *PokerMsg) GetPokerList() []string {
	if m != nil {
		return m.PokerList
	}
	return nil
}

func (m *PokerMsg) GetTablePokerList() []string {
	if m != nil {
		return m.TablePokerList
	}
	return nil
}

type OperateInfo struct {
	ActionPlayer         int64    `protobuf:"varint,1,opt,name=ActionPlayer,proto3" json:"ActionPlayer,omitempty"`
	CurrentTurn          int64    `protobuf:"varint,2,opt,name=CurrentTurn,proto3" json:"CurrentTurn,omitempty"`
	Action               string   `protobuf:"bytes,3,opt,name=Action,proto3" json:"Action,omitempty"`
	Transitions          []string `protobuf:"bytes,4,rep,name=transitions,proto3" json:"transitions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OperateInfo) Reset()         { *m = OperateInfo{} }
func (m *OperateInfo) String() string { return proto.CompactTextString(m) }
func (*OperateInfo) ProtoMessage()    {}
func (*OperateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e54be1aa9105a3e, []int{6}
}
func (m *OperateInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperateInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperateInfo.Merge(m, src)
}
func (m *OperateInfo) XXX_Size() int {
	return m.Size()
}
func (m *OperateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OperateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OperateInfo proto.InternalMessageInfo

func (m *OperateInfo) GetActionPlayer() int64 {
	if m != nil {
		return m.ActionPlayer
	}
	return 0
}

func (m *OperateInfo) GetCurrentTurn() int64 {
	if m != nil {
		return m.CurrentTurn
	}
	return 0
}

func (m *OperateInfo) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *OperateInfo) GetTransitions() []string {
	if m != nil {
		return m.Transitions
	}
	return nil
}

func init() {
	proto.RegisterEnum("pbtruco.Statue", Statue_name, Statue_value)
	proto.RegisterType((*Empty)(nil), "pbtruco.Empty")
	proto.RegisterType((*RoundEnvidoPoints)(nil), "pbtruco.RoundEnvidoPoints")
	proto.RegisterType((*GameOverInfo)(nil), "pbtruco.GameOverInfo")
	proto.RegisterType((*GameWinInfo)(nil), "pbtruco.GameWinInfo")
	proto.RegisterType((*GameInfo)(nil), "pbtruco.GameInfo")
	proto.RegisterType((*PokerMsg)(nil), "pbtruco.PokerMsg")
	proto.RegisterType((*OperateInfo)(nil), "pbtruco.OperateInfo")
}

func init() { proto.RegisterFile("truco.proto", fileDescriptor_2e54be1aa9105a3e) }

var fileDescriptor_2e54be1aa9105a3e = []byte{
	// 397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcf, 0x8a, 0xd4, 0x30,
	0x1c, 0xc7, 0xcd, 0xf4, 0xcf, 0x76, 0x7e, 0x2d, 0xcb, 0x6c, 0x10, 0x29, 0x8b, 0x0c, 0x25, 0xa0,
	0x16, 0x0f, 0x73, 0x50, 0x1f, 0xc0, 0x71, 0x5d, 0x64, 0x50, 0x69, 0xc9, 0x56, 0x7a, 0x94, 0x76,
	0x26, 0x4a, 0x70, 0x37, 0x29, 0x49, 0xba, 0xb0, 0x4f, 0xe0, 0xc9, 0xf7, 0xf2, 0xe8, 0x23, 0xc8,
	0x3c, 0x89, 0x24, 0xad, 0x33, 0xd5, 0xcb, 0xde, 0xfa, 0xfd, 0xfc, 0xfe, 0xe5, 0x03, 0x85, 0xd8,
	0xa8, 0x7e, 0x2b, 0x57, 0x9d, 0x92, 0x46, 0xe2, 0x93, 0xae, 0x75, 0xf1, 0x1c, 0xda, 0x46, 0xb3,
	0x01, 0x92, 0x13, 0x08, 0x2e, 0x6f, 0x3a, 0x73, 0x47, 0xde, 0xc3, 0x19, 0x95, 0xbd, 0xd8, 0x5d,
	0x8a, 0x5b, 0xbe, 0x93, 0xa5, 0xe4, 0xc2, 0x68, 0xfc, 0x10, 0x02, 0xbd, 0x95, 0x8a, 0xa5, 0x28,
	0x43, 0x79, 0x40, 0x87, 0x80, 0x33, 0x88, 0xd9, 0xb1, 0x2b, 0x9d, 0xb9, 0xda, 0x14, 0x91, 0xd7,
	0x90, 0xbc, 0x6b, 0x6e, 0x58, 0x71, 0xcb, 0xd4, 0x46, 0x7c, 0x91, 0xf8, 0x1c, 0xa2, 0xf2, 0xba,
	0xb9, 0x63, 0x6a, 0xb3, 0x73, 0xab, 0x3c, 0x7a, 0xc8, 0xf6, 0xc6, 0x95, 0xbb, 0x31, 0xec, 0x19,
	0x02, 0x79, 0x05, 0xb1, 0xdd, 0x50, 0x73, 0xe1, 0x16, 0x3c, 0x01, 0xdf, 0xc6, 0x14, 0x65, 0x5e,
	0x1e, 0xbf, 0x38, 0x5b, 0x8d, 0x2a, 0x2b, 0x0b, 0x6d, 0x03, 0x75, 0x65, 0xf2, 0x1d, 0x41, 0xf4,
	0x17, 0xdd, 0x77, 0x54, 0x4f, 0x8f, 0x1e, 0xc4, 0x6a, 0x2e, 0x0e, 0x43, 0x9e, 0x1b, 0x9a, 0x22,
	0xfc, 0x0c, 0x82, 0x2b, 0xd3, 0x18, 0x96, 0xfa, 0x19, 0xca, 0x4f, 0x27, 0x0f, 0xa9, 0xb9, 0x70,
	0x05, 0x3a, 0xd4, 0x49, 0x09, 0x51, 0x29, 0xbf, 0x31, 0xf5, 0x51, 0x7f, 0xc5, 0x8f, 0x61, 0xee,
	0xbe, 0x3f, 0x70, 0x6d, 0x9c, 0xc1, 0x9c, 0x1e, 0x01, 0x7e, 0x0a, 0xa7, 0x55, 0xd3, 0x5e, 0xb3,
	0x63, 0xcb, 0xcc, 0xb5, 0xfc, 0x47, 0xc9, 0x0f, 0x04, 0x71, 0xd1, 0x31, 0xd5, 0x98, 0x41, 0x8f,
	0x40, 0xb2, 0xde, 0x1a, 0x2e, 0xc7, 0xc7, 0x8d, 0x8a, 0xff, 0x30, 0x2b, 0x74, 0xd1, 0x2b, 0xc5,
	0x84, 0xa9, 0x7a, 0x25, 0x9c, 0xac, 0x47, 0xa7, 0x08, 0x3f, 0x82, 0x70, 0x98, 0x70, 0xb6, 0x73,
	0x3a, 0x26, 0x3b, 0x69, 0x54, 0x23, 0x34, 0xb7, 0x49, 0xa7, 0xbe, 0x7b, 0xd2, 0x14, 0x3d, 0xcf,
	0x21, 0xb4, 0xaa, 0x3d, 0xc3, 0x09, 0x44, 0xc5, 0xa7, 0xea, 0xf3, 0xc5, 0x9a, 0xbe, 0x5d, 0x3c,
	0xc0, 0x21, 0xcc, 0x8a, 0x72, 0x81, 0x70, 0x04, 0x7e, 0xbd, 0xde, 0x54, 0x8b, 0xd9, 0x9b, 0xe4,
	0xe7, 0x7e, 0x89, 0x7e, 0xed, 0x97, 0xe8, 0xf7, 0x7e, 0x89, 0xda, 0xd0, 0xfd, 0x78, 0x2f, 0xff,
	0x04, 0x00, 0x00, 0xff, 0xff, 0xc6, 0xf4, 0x98, 0xbb, 0x9c, 0x02, 0x00, 0x00,
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoundEnvidoPoints) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoundEnvidoPoints) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Score != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTruco(dAtA, i, uint64(m.Score))
	}
	if m.EnvidoPoint != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTruco(dAtA, i, uint64(m.EnvidoPoint))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameOverInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameOverInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTruco(dAtA, i, uint64(m.PlayerId))
	}
	if m.Score != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTruco(dAtA, i, uint64(m.Score))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameWinInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameWinInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Game) > 0 {
		for _, msg := range m.Game {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTruco(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTruco(dAtA, i, uint64(m.PlayerId))
	}
	if m.Score != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTruco(dAtA, i, uint64(m.Score))
	}
	if m.WinPlayerId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTruco(dAtA, i, uint64(m.WinPlayerId))
	}
	if m.State != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTruco(dAtA, i, uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PokerMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PokerMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PokerList) > 0 {
		for _, s := range m.PokerList {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.TablePokerList) > 0 {
		for _, s := range m.TablePokerList {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OperateInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperateInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActionPlayer != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTruco(dAtA, i, uint64(m.ActionPlayer))
	}
	if m.CurrentTurn != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTruco(dAtA, i, uint64(m.CurrentTurn))
	}
	if len(m.Action) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTruco(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if len(m.Transitions) > 0 {
		for _, s := range m.Transitions {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTruco(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoundEnvidoPoints) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Score != 0 {
		n += 1 + sovTruco(uint64(m.Score))
	}
	if m.EnvidoPoint != 0 {
		n += 1 + sovTruco(uint64(m.EnvidoPoint))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameOverInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != 0 {
		n += 1 + sovTruco(uint64(m.PlayerId))
	}
	if m.Score != 0 {
		n += 1 + sovTruco(uint64(m.Score))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameWinInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Game) > 0 {
		for _, e := range m.Game {
			l = e.Size()
			n += 1 + l + sovTruco(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != 0 {
		n += 1 + sovTruco(uint64(m.PlayerId))
	}
	if m.Score != 0 {
		n += 1 + sovTruco(uint64(m.Score))
	}
	if m.WinPlayerId != 0 {
		n += 1 + sovTruco(uint64(m.WinPlayerId))
	}
	if m.State != 0 {
		n += 1 + sovTruco(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PokerMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PokerList) > 0 {
		for _, s := range m.PokerList {
			l = len(s)
			n += 1 + l + sovTruco(uint64(l))
		}
	}
	if len(m.TablePokerList) > 0 {
		for _, s := range m.TablePokerList {
			l = len(s)
			n += 1 + l + sovTruco(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OperateInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionPlayer != 0 {
		n += 1 + sovTruco(uint64(m.ActionPlayer))
	}
	if m.CurrentTurn != 0 {
		n += 1 + sovTruco(uint64(m.CurrentTurn))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovTruco(uint64(l))
	}
	if len(m.Transitions) > 0 {
		for _, s := range m.Transitions {
			l = len(s)
			n += 1 + l + sovTruco(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTruco(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTruco(x uint64) (n int) {
	return sovTruco(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTruco
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTruco(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoundEnvidoPoints) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTruco
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoundEnvidoPoints: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoundEnvidoPoints: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvidoPoint", wireType)
			}
			m.EnvidoPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnvidoPoint |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTruco(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameOverInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTruco
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameOverInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameOverInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTruco(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameWinInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTruco
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameWinInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameWinInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Game", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTruco
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTruco
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Game = append(m.Game, &GameInfo{})
			if err := m.Game[len(m.Game)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTruco(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTruco
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinPlayerId", wireType)
			}
			m.WinPlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinPlayerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= WinState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTruco(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PokerMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTruco
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PokerMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PokerMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PokerList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTruco
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTruco
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PokerList = append(m.PokerList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TablePokerList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTruco
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTruco
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TablePokerList = append(m.TablePokerList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTruco(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperateInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTruco
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperateInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperateInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionPlayer", wireType)
			}
			m.ActionPlayer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionPlayer |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTurn", wireType)
			}
			m.CurrentTurn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentTurn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTruco
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTruco
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transitions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTruco
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTruco
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transitions = append(m.Transitions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTruco(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTruco(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTruco
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTruco
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTruco
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTruco
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTruco(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTruco
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTruco = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTruco   = fmt.Errorf("proto: integer overflow")
)
