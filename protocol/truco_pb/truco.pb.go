// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: truco.proto

package pbtruco

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Statue int32

const (
	Statue_OUT_CARD Statue = 0
	Statue_OP       Statue = 1
	Statue_WAIT     Statue = 2
)

var Statue_name = map[int32]string{
	0: "OUT_CARD",
	1: "OP",
	2: "WAIT",
}

var Statue_value = map[string]int32{
	"OUT_CARD": 0,
	"OP":       1,
	"WAIT":     2,
}

func (x Statue) String() string {
	return proto.EnumName(Statue_name, int32(x))
}

func (Statue) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e54be1aa9105a3e, []int{0}
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e54be1aa9105a3e, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type GameOverInfo struct {
	PlayerId             int64    `protobuf:"varint,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	Score                int32    `protobuf:"varint,2,opt,name=Score,proto3" json:"Score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameOverInfo) Reset()         { *m = GameOverInfo{} }
func (m *GameOverInfo) String() string { return proto.CompactTextString(m) }
func (*GameOverInfo) ProtoMessage()    {}
func (*GameOverInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e54be1aa9105a3e, []int{1}
}
func (m *GameOverInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameOverInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameOverInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameOverInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameOverInfo.Merge(m, src)
}
func (m *GameOverInfo) XXX_Size() int {
	return m.Size()
}
func (m *GameOverInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GameOverInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GameOverInfo proto.InternalMessageInfo

func (m *GameOverInfo) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *GameOverInfo) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

type GameWinInfo struct {
	Game                 []*GameInfo `protobuf:"bytes,1,rep,name=Game,proto3" json:"Game,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GameWinInfo) Reset()         { *m = GameWinInfo{} }
func (m *GameWinInfo) String() string { return proto.CompactTextString(m) }
func (*GameWinInfo) ProtoMessage()    {}
func (*GameWinInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e54be1aa9105a3e, []int{2}
}
func (m *GameWinInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameWinInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameWinInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameWinInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameWinInfo.Merge(m, src)
}
func (m *GameWinInfo) XXX_Size() int {
	return m.Size()
}
func (m *GameWinInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GameWinInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GameWinInfo proto.InternalMessageInfo

func (m *GameWinInfo) GetGame() []*GameInfo {
	if m != nil {
		return m.Game
	}
	return nil
}

type GameInfo struct {
	PlayerId             int64    `protobuf:"varint,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	Score                int32    `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	WinPlayerId          int64    `protobuf:"varint,3,opt,name=WinPlayerId,proto3" json:"WinPlayerId,omitempty"`
	State                WinState `protobuf:"varint,4,opt,name=State,proto3,enum=pbtruco.WinState" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameInfo) Reset()         { *m = GameInfo{} }
func (m *GameInfo) String() string { return proto.CompactTextString(m) }
func (*GameInfo) ProtoMessage()    {}
func (*GameInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e54be1aa9105a3e, []int{3}
}
func (m *GameInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameInfo.Merge(m, src)
}
func (m *GameInfo) XXX_Size() int {
	return m.Size()
}
func (m *GameInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GameInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GameInfo proto.InternalMessageInfo

func (m *GameInfo) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *GameInfo) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *GameInfo) GetWinPlayerId() int64 {
	if m != nil {
		return m.WinPlayerId
	}
	return 0
}

func (m *GameInfo) GetState() WinState {
	if m != nil {
		return m.State
	}
	return WinState_NormalFinish
}

type PokerMsg struct {
	PokerList            []int32  `protobuf:"varint,1,rep,packed,name=PokerList,proto3" json:"PokerList,omitempty"`
	PlayerId             int32    `protobuf:"varint,2,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	IsFrist              bool     `protobuf:"varint,3,opt,name=isFrist,proto3" json:"isFrist,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PokerMsg) Reset()         { *m = PokerMsg{} }
func (m *PokerMsg) String() string { return proto.CompactTextString(m) }
func (*PokerMsg) ProtoMessage()    {}
func (*PokerMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e54be1aa9105a3e, []int{4}
}
func (m *PokerMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PokerMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PokerMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PokerMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PokerMsg.Merge(m, src)
}
func (m *PokerMsg) XXX_Size() int {
	return m.Size()
}
func (m *PokerMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_PokerMsg.DiscardUnknown(m)
}

var xxx_messageInfo_PokerMsg proto.InternalMessageInfo

func (m *PokerMsg) GetPokerList() []int32 {
	if m != nil {
		return m.PokerList
	}
	return nil
}

func (m *PokerMsg) GetPlayerId() int32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *PokerMsg) GetIsFrist() bool {
	if m != nil {
		return m.IsFrist
	}
	return false
}

type PokerInfo struct {
	PokerInfo            []*PokerMsg `protobuf:"bytes,1,rep,name=PokerInfo,proto3" json:"PokerInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PokerInfo) Reset()         { *m = PokerInfo{} }
func (m *PokerInfo) String() string { return proto.CompactTextString(m) }
func (*PokerInfo) ProtoMessage()    {}
func (*PokerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e54be1aa9105a3e, []int{5}
}
func (m *PokerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PokerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PokerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PokerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PokerInfo.Merge(m, src)
}
func (m *PokerInfo) XXX_Size() int {
	return m.Size()
}
func (m *PokerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PokerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PokerInfo proto.InternalMessageInfo

func (m *PokerInfo) GetPokerInfo() []*PokerMsg {
	if m != nil {
		return m.PokerInfo
	}
	return nil
}

type PlayerScore struct {
	PlayerId             int64    `protobuf:"varint,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	Score                int32    `protobuf:"varint,2,opt,name=Score,proto3" json:"Score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerScore) Reset()         { *m = PlayerScore{} }
func (m *PlayerScore) String() string { return proto.CompactTextString(m) }
func (*PlayerScore) ProtoMessage()    {}
func (*PlayerScore) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e54be1aa9105a3e, []int{6}
}
func (m *PlayerScore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerScore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerScore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerScore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerScore.Merge(m, src)
}
func (m *PlayerScore) XXX_Size() int {
	return m.Size()
}
func (m *PlayerScore) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerScore.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerScore proto.InternalMessageInfo

func (m *PlayerScore) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *PlayerScore) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

type OperateInfo struct {
	IsOp                 bool     `protobuf:"varint,1,opt,name=IsOp,proto3" json:"IsOp,omitempty"`
	OpName               string   `protobuf:"bytes,2,opt,name=OpName,proto3" json:"OpName,omitempty"`
	CardNum              int32    `protobuf:"varint,3,opt,name=CardNum,proto3" json:"CardNum,omitempty"`
	PlayerId             int64    `protobuf:"varint,4,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OperateInfo) Reset()         { *m = OperateInfo{} }
func (m *OperateInfo) String() string { return proto.CompactTextString(m) }
func (*OperateInfo) ProtoMessage()    {}
func (*OperateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e54be1aa9105a3e, []int{7}
}
func (m *OperateInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperateInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperateInfo.Merge(m, src)
}
func (m *OperateInfo) XXX_Size() int {
	return m.Size()
}
func (m *OperateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OperateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OperateInfo proto.InternalMessageInfo

func (m *OperateInfo) GetIsOp() bool {
	if m != nil {
		return m.IsOp
	}
	return false
}

func (m *OperateInfo) GetOpName() string {
	if m != nil {
		return m.OpName
	}
	return ""
}

func (m *OperateInfo) GetCardNum() int32 {
	if m != nil {
		return m.CardNum
	}
	return 0
}

func (m *OperateInfo) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func init() {
	proto.RegisterEnum("pbtruco.Statue", Statue_name, Statue_value)
	proto.RegisterType((*Empty)(nil), "pbtruco.Empty")
	proto.RegisterType((*GameOverInfo)(nil), "pbtruco.GameOverInfo")
	proto.RegisterType((*GameWinInfo)(nil), "pbtruco.GameWinInfo")
	proto.RegisterType((*GameInfo)(nil), "pbtruco.GameInfo")
	proto.RegisterType((*PokerMsg)(nil), "pbtruco.PokerMsg")
	proto.RegisterType((*PokerInfo)(nil), "pbtruco.PokerInfo")
	proto.RegisterType((*PlayerScore)(nil), "pbtruco.PlayerScore")
	proto.RegisterType((*OperateInfo)(nil), "pbtruco.OperateInfo")
}

func init() { proto.RegisterFile("truco.proto", fileDescriptor_2e54be1aa9105a3e) }

var fileDescriptor_2e54be1aa9105a3e = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xdf, 0x4a, 0xeb, 0x40,
	0x10, 0xc6, 0xcf, 0xb6, 0x49, 0x9a, 0x4e, 0xca, 0xa1, 0x67, 0x39, 0x1c, 0x42, 0x39, 0x94, 0x10,
	0x10, 0x83, 0x17, 0x15, 0xd4, 0x4b, 0x41, 0x6b, 0xfd, 0x43, 0x40, 0x9b, 0xb2, 0xad, 0xe4, 0x4e,
	0x49, 0xdb, 0x55, 0x82, 0x36, 0x09, 0x9b, 0x54, 0xe8, 0x13, 0xf8, 0x6a, 0x5e, 0xfa, 0x08, 0xd2,
	0x27, 0x91, 0x9d, 0x34, 0x6d, 0x8a, 0x17, 0x82, 0x77, 0xfb, 0x9b, 0xd9, 0x6f, 0xe6, 0x9b, 0xd9,
	0x05, 0x23, 0x13, 0xf3, 0x49, 0xdc, 0x49, 0x44, 0x9c, 0xc5, 0xb4, 0x96, 0x8c, 0x11, 0x5b, 0x30,
	0x0e, 0x52, 0x9e, 0x07, 0xed, 0x1a, 0xa8, 0x17, 0xb3, 0x24, 0x5b, 0xd8, 0xa7, 0xd0, 0xb8, 0x0a,
	0x66, 0xdc, 0x7b, 0xe1, 0xc2, 0x8d, 0x1e, 0x62, 0xda, 0x02, 0x7d, 0xf0, 0x1c, 0x2c, 0xb8, 0x70,
	0xa7, 0x26, 0xb1, 0x88, 0x53, 0x65, 0x6b, 0xa6, 0x7f, 0x41, 0x1d, 0x4e, 0x62, 0xc1, 0xcd, 0x8a,
	0x45, 0x1c, 0x95, 0xe5, 0x60, 0x1f, 0x81, 0x21, 0x2b, 0xf8, 0x61, 0x84, 0x05, 0x76, 0x40, 0x91,
	0x68, 0x12, 0xab, 0xea, 0x18, 0x07, 0x7f, 0x3a, 0xab, 0xee, 0x1d, 0x19, 0x94, 0x17, 0x18, 0xa6,
	0xed, 0x57, 0x02, 0x7a, 0x11, 0xfa, 0xae, 0x69, 0x5a, 0x6e, 0x8a, 0x40, 0x2d, 0x30, 0xfc, 0x30,
	0x5a, 0x8b, 0xaa, 0x28, 0x2a, 0x87, 0xe8, 0x2e, 0xa8, 0xc3, 0x2c, 0xc8, 0xb8, 0xa9, 0x58, 0xc4,
	0xf9, 0x5d, 0x32, 0xe2, 0x87, 0x11, 0x26, 0x58, 0x9e, 0xb7, 0xef, 0x40, 0x1f, 0xc4, 0x4f, 0x5c,
	0xdc, 0xa4, 0x8f, 0xf4, 0x3f, 0xd4, 0xf1, 0x7c, 0x1d, 0xa6, 0x19, 0x4e, 0xa0, 0xb2, 0x4d, 0x60,
	0xcb, 0x66, 0xee, 0x66, 0x63, 0xd3, 0x84, 0x5a, 0x98, 0x5e, 0x0a, 0xa9, 0x93, 0x66, 0x74, 0x56,
	0xa0, 0x7d, 0xbc, 0xaa, 0x89, 0x93, 0xee, 0x97, 0xe0, 0xcb, 0x8a, 0x0a, 0x1b, 0x6c, 0x73, 0xc7,
	0x3e, 0x01, 0x23, 0xef, 0x81, 0xcb, 0xfe, 0xc1, 0xf3, 0xc4, 0x60, 0x78, 0x09, 0x17, 0x41, 0x96,
	0xaf, 0x9a, 0x82, 0xe2, 0xa6, 0x5e, 0x82, 0x62, 0x9d, 0xe1, 0x99, 0xfe, 0x03, 0xcd, 0x4b, 0xfa,
	0xf2, 0xd1, 0xa4, 0xb2, 0xce, 0x56, 0x24, 0x67, 0xea, 0x05, 0x62, 0xda, 0x9f, 0xcf, 0x70, 0x26,
	0x95, 0x15, 0xb8, 0x65, 0x43, 0xd9, 0xb6, 0xb1, 0xe7, 0x80, 0x26, 0x17, 0x3b, 0xe7, 0xb4, 0x01,
	0xba, 0x77, 0x3b, 0xba, 0xef, 0x75, 0xd9, 0x79, 0xf3, 0x17, 0xd5, 0xa0, 0xe2, 0x0d, 0x9a, 0x84,
	0xea, 0xa0, 0xf8, 0x5d, 0x77, 0xd4, 0xac, 0x9c, 0x35, 0xde, 0x96, 0x6d, 0xf2, 0xbe, 0x6c, 0x93,
	0x8f, 0x65, 0x9b, 0x8c, 0x35, 0xfc, 0x99, 0x87, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x78, 0x91,
	0x27, 0x10, 0xbd, 0x02, 0x00, 0x00,
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameOverInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameOverInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTruco(dAtA, i, uint64(m.PlayerId))
	}
	if m.Score != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTruco(dAtA, i, uint64(m.Score))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameWinInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameWinInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Game) > 0 {
		for _, msg := range m.Game {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTruco(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GameInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTruco(dAtA, i, uint64(m.PlayerId))
	}
	if m.Score != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTruco(dAtA, i, uint64(m.Score))
	}
	if m.WinPlayerId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTruco(dAtA, i, uint64(m.WinPlayerId))
	}
	if m.State != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTruco(dAtA, i, uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PokerMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PokerMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PokerList) > 0 {
		dAtA2 := make([]byte, len(m.PokerList)*10)
		var j1 int
		for _, num1 := range m.PokerList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintTruco(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.PlayerId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTruco(dAtA, i, uint64(m.PlayerId))
	}
	if m.IsFrist {
		dAtA[i] = 0x18
		i++
		if m.IsFrist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PokerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PokerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PokerInfo) > 0 {
		for _, msg := range m.PokerInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTruco(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerScore) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTruco(dAtA, i, uint64(m.PlayerId))
	}
	if m.Score != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTruco(dAtA, i, uint64(m.Score))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OperateInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperateInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsOp {
		dAtA[i] = 0x8
		i++
		if m.IsOp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.OpName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTruco(dAtA, i, uint64(len(m.OpName)))
		i += copy(dAtA[i:], m.OpName)
	}
	if m.CardNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTruco(dAtA, i, uint64(m.CardNum))
	}
	if m.PlayerId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTruco(dAtA, i, uint64(m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTruco(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameOverInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != 0 {
		n += 1 + sovTruco(uint64(m.PlayerId))
	}
	if m.Score != 0 {
		n += 1 + sovTruco(uint64(m.Score))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameWinInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Game) > 0 {
		for _, e := range m.Game {
			l = e.Size()
			n += 1 + l + sovTruco(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != 0 {
		n += 1 + sovTruco(uint64(m.PlayerId))
	}
	if m.Score != 0 {
		n += 1 + sovTruco(uint64(m.Score))
	}
	if m.WinPlayerId != 0 {
		n += 1 + sovTruco(uint64(m.WinPlayerId))
	}
	if m.State != 0 {
		n += 1 + sovTruco(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PokerMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PokerList) > 0 {
		l = 0
		for _, e := range m.PokerList {
			l += sovTruco(uint64(e))
		}
		n += 1 + sovTruco(uint64(l)) + l
	}
	if m.PlayerId != 0 {
		n += 1 + sovTruco(uint64(m.PlayerId))
	}
	if m.IsFrist {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PokerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PokerInfo) > 0 {
		for _, e := range m.PokerInfo {
			l = e.Size()
			n += 1 + l + sovTruco(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerScore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != 0 {
		n += 1 + sovTruco(uint64(m.PlayerId))
	}
	if m.Score != 0 {
		n += 1 + sovTruco(uint64(m.Score))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OperateInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsOp {
		n += 2
	}
	l = len(m.OpName)
	if l > 0 {
		n += 1 + l + sovTruco(uint64(l))
	}
	if m.CardNum != 0 {
		n += 1 + sovTruco(uint64(m.CardNum))
	}
	if m.PlayerId != 0 {
		n += 1 + sovTruco(uint64(m.PlayerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTruco(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTruco(x uint64) (n int) {
	return sovTruco(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTruco
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTruco(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameOverInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTruco
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameOverInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameOverInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTruco(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameWinInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTruco
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameWinInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameWinInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Game", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTruco
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTruco
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Game = append(m.Game, &GameInfo{})
			if err := m.Game[len(m.Game)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTruco(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTruco
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinPlayerId", wireType)
			}
			m.WinPlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinPlayerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= WinState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTruco(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PokerMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTruco
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PokerMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PokerMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTruco
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PokerList = append(m.PokerList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTruco
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTruco
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTruco
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PokerList) == 0 {
					m.PokerList = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTruco
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PokerList = append(m.PokerList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PokerList", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFrist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFrist = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTruco(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PokerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTruco
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PokerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PokerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PokerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTruco
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTruco
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PokerInfo = append(m.PokerInfo, &PokerMsg{})
			if err := m.PokerInfo[len(m.PokerInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTruco(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTruco
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTruco(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperateInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTruco
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperateInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperateInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOp = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTruco
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTruco
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardNum", wireType)
			}
			m.CardNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTruco(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTruco
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTruco(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTruco
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTruco
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTruco
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTruco
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTruco
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTruco(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTruco
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTruco = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTruco   = fmt.Errorf("proto: integer overflow")
)
